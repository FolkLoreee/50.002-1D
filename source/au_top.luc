module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output outled
  ) {
  sig rst;                  // reset signal
  // main_fsm my_fsm(.clk(clk), .rst(io_button[2]));
  //  button_conditioner button_cond[3](.clk(clk));
  // edge_detector btn_detector[3](#RISE(1), #FALL(0), .clk(clk));
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  led_clock myled_clock(.clk(clk),.rst(rst));
  decoder mydecoder(.clk(clk),.rst(rst));
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    mydecoder.sequence = b1001110010100101;
    myled_clock.answer = mydecoder.led_sequence;
    myled_clock.pointer = 0;
    outled = 0;
    //button_cond.in = io_button[2:0];
    //btn_detector.in = button_cond.out;
    //my_fsm.buttons = btn_detector.out; 
    //my_fsm.button_one = io_button[0];
    //my_fsm.button_two = io_button[1];
    //my_fsm.button_three = io_button[3];
    //io_led[0] = my_fsm.out;
   
    
  }
}
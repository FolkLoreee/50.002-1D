module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    //input io_dip [3][8],   // DIP switches on IO Shield
    input button_red,      // 01 
    input button_blue,      // 10 
     input button_green ,   // 11
    output life[3],
    output seven_seg_ext[7],
    output seven_seg_ds[2],
    output seven_seg_dp[1],
    output outled
    
  ) {
  
  sig rst;                  // reset signal
  
  
  led_clock led_seq(.clk(clk),.rst(rst));
  led_decoder mydecoder(.clk(clk),.rst(rst));
  ws2812b_writer led_strip(#PIXEL_COUNT(256), .clk(clk), .rst(rst)); //set for 3 pixels
  
  
  seq_plus_twoSlow counterClock(.clk(clk), .rst(rst));
  
  main_fsm my_fsm(.clk(clk), .rst(io_button[3]));
  
  alu central_alu;
  button_conditioner button_cond[3](.clk(clk));
  edge_detector btn_detector[3](#RISE(1), #FALL(0), .clk(clk));
 
  register regfile (.clk(clk), .rst(rst));
  answer_seq answerSequence(.clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      multi_seven_seg seg;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    // to be changed
    seven_seg_ext = ~seg.seg;
    seven_seg_dp = 0;
    seven_seg_ds = ~seg.sel;
        
    seg.values = {my_fsm.score_second_digit , my_fsm.score_first_digit};
    
    mydecoder.sequence[15:8] =my_fsm.out[23:16]; // change to fsm output 
    mydecoder.sequence[7:0] = my_fsm.out[15:8]; 
    
    led_seq.answer = mydecoder.led_sequence;
    led_seq.pointer = counterClock.pointer; // should take in the 

    led_strip.update=1; //sample write 
    led_strip.color= led_seq.led_seq[led_strip.pixel]; 
    outled=led_strip.led;
    
    
    
    
    // Inputs of ALU 
    central_alu.a = my_fsm.alu_input_a;
    central_alu.b = my_fsm.alu_input_b;
    central_alu.alufn_signal = my_fsm.alufn_signal;
    
    my_fsm.alu_in = central_alu.out; 
    
    // REGISTER ADDRESSES AND DATA 
    regfile.read_address_a = my_fsm.read_address_a; // 4 bit 
    regfile.read_address_b = my_fsm.read_address_b; // 4 bit 
    regfile.we = my_fsm.we;                          // 1 bit 
    regfile.write_address = my_fsm.write_address; // 4 bit 
    regfile.data = my_fsm.write_data;         // 16 bit 
    my_fsm.regA = regfile.out_a;             // 16 bit 
    my_fsm.regB = regfile.out_b;            // 16 bit 
    
    // BUTTON TO CONTROL FSM
  
    
    //button_cond.in = io_button[2:0];
    button_cond.in[0] = button_red; // change to red later --> 01
    button_cond.in[1] = button_blue;   // change to blue later ---> 10 
    button_cond.in[2] = button_green; // --> 11 
    
    btn_detector.in = button_cond.out;
    my_fsm.buttons = btn_detector.out; 
  
    // Counter Input to enter fsm
    my_fsm.counter_input = counterClock.out;
    
    // Pointer Input to enter fsm 
    my_fsm.pointer_input = counterClock.pointer;
    // Signal to start the clock counter only when the btn init is pressed 
    counterClock.start_signal = my_fsm.start_clock_signal;
    
    my_fsm.randomGenSequence = answerSequence.out; 
    io_led[0] = my_fsm.out[7:0];
    //io_led[1] = answerSequence.out;
    io_led[1] = my_fsm.out[15:8];
    io_led[2] = my_fsm.out[23:16];
    
    life[2:0] = my_fsm.life[2:0];
   
   
    
  }
}
module led_main (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output outled[256][24]         // to LED strip, Br pin C49 
  ) {
  
  sig rst;                  // reset signal
  
  const CLKSPEED = 26;
  const SLOWCLOCK_SIZE = 27;
  
  const LED_SEQUENCE = {{hFF0000, h000000, h000000, h000000, h000000, h000000, h000000, h000000},
                        {h000000, hFF0000, h000000, h000000, h000000, h000000, h000000, h000000},
                        {h000000, h000000, hFF0000, h000000, h000000, h000000, h000000, h000000},
                        {h000000, h000000, h000000, hFF0000, h000000, h000000, h000000, h000000},
                        {h000000, h000000, h000000, h000000, hFF0000, h000000, h000000, h000000},
                        {h000000, h000000, h000000, h000000, h000000, hFF0000, h000000, h000000},
                        {h000000, h000000, h000000, h000000, h000000, h000000, hFF0000, h000000},
                        {h000000, h000000, h000000, h000000, h000000, h000000, h000000, hFF0000}};
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  counter slowClock(#SIZE(SLOWCLOCK_SIZE), .clk(clk), .rst(rst));
  edge_detector slowClockEdge(#RISE(1), #FALL(0), .clk(clk));
  
  .clk(clk){
  dff led_colour[256][24];
  dff pointer[1];
  
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset

    slowClockEdge.in = slowClock.value[SLOWCLOCK_SIZE - 1];
    
    
    if (slowClockEdge.out[0] < d8){
    led_colour.d[41:0] = 42x{{h000000}};
    led_colour.d[43:42] = 2x{{hFF0000}};
    led_colour.d[44] = h000000;
    led_colour.d[45] = LED_SEQUENCE[pointer.q][0];
    led_colour.d[49:46] = 4x{{h000000}};
    led_colour.d[50] = LED_SEQUENCE[pointer.q][0];
    led_colour.d[51] = h000000;
    led_colour.d[53:52] = 2x{{hFF0000}};
    led_colour.d[255:54] = 202x{{h000000}};
    
    pointer.d = pointer.q + 1;
    outled = led_colour.q;  
    }
    else{
    pointer.d = 0;
    outled = led_colour.q;
  }
}